from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import MessageNotModified
from aiogram import types
from loader import config
from data import texts


def subscription_required(chat_link: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."""
    markup = InlineKeyboardMarkup()
    join_chat_button = InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url=chat_link)
    markup.add(join_chat_button)
    return markup


def main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–æ–≤–µ—â–µ–Ω–∏–π."""
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üí† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        KeyboardButton("üë®‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    )


def menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∏ FAQ."""
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üí† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_area"))
    markup.add(
        InlineKeyboardButton("‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data="faq"),
        InlineKeyboardButton("‚≠êÔ∏è –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"),
        InlineKeyboardButton("üìë –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="my_requests"),
        InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="create_alert")
    )
    return markup


def alerts_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Å –æ–ø—Ü–∏—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏."""
    return menu_keyboard()


def back_to_alerts_kb():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º."""
    return menu_keyboard()


def type_alert():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π."""
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤", callback_data="default_alert"),
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_menu")
    )


async def get_warehouses_markup(redis_client):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–∫–ª–∞–¥–æ–≤."""
    markup = InlineKeyboardMarkup()
    warehouses = await redis_client.get_warehouses_list()
    for warehouse in warehouses:
        markup.add(InlineKeyboardButton(
            text=warehouse['name'],
            callback_data=f"warehouse_{warehouse['id']}"
        ))
    return markup


async def warehouse_markup(redis_client, selected_warehouses=None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    selected_warehouses = [str(id) for id in (selected_warehouses or [])]
    warehouses = await redis_client.get_warehouses_list()

    if not warehouses:
        return InlineKeyboardMarkup().row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_callback"))

    markup = InlineKeyboardMarkup(row_width=2)
    for warehouse in warehouses:
        is_selected = str(warehouse["id"]) in selected_warehouses
        text = f"‚úÖ {warehouse['name']}" if is_selected else warehouse['name']
        callback_data = f"{'unselect' if is_selected else 'select'}_{warehouse['id']}"

        markup.insert(InlineKeyboardButton(text, callback_data=callback_data))

    if selected_warehouses:
        markup.row(
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è", callback_data="continue_supply"),
        )
        markup.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_callback")
        )
    else:
        markup.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_callback")
        )

    return markup


async def update_markup(message: types.Message, markup: InlineKeyboardMarkup):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    try:
        await message.edit_reply_markup(reply_markup=markup)
    except MessageNotModified:
        await message.delete()
        await message.answer(texts.select_warehouse_text, reply_markup=markup)
    except Exception:
        return


def supply_types_markup(selected_supply_types=None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫."""
    selected_supply_types = set(selected_supply_types or [])
    markup = InlineKeyboardMarkup(row_width=2)
    for name, (value, type_id) in texts.types_map.items():
        bt_text = f"‚úÖ {name}" if type_id in selected_supply_types else name
        callback_data = f"{'unselecttype' if type_id in selected_supply_types else 'selecttype'}_{type_id}"
        markup.insert(InlineKeyboardButton(text=bt_text, callback_data=callback_data))

    if selected_supply_types:
        markup.row(InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è", callback_data="continue_supply_coeff"))

    markup.row(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_callback"))

    return markup


def acceptance_coefficient_markup():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–∏–µ–º–∫–∏."""
    buttons = [
        InlineKeyboardButton(text=f"<{i}", callback_data=f"coefficient_{i}") for i in range(1, 8)
    ]
    buttons.insert(0, InlineKeyboardButton(text="0", callback_data="coefficient_0"))

    markup = InlineKeyboardMarkup(row_width=4)

    for i in range(0, len(buttons), 4):
        markup.row(*buttons[i:i + 4])

    markup.row(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_callback"))
    return markup


def period_selection_markup():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    markup = InlineKeyboardMarkup(row_width=2)

    markup.add(*(InlineKeyboardButton(text=p[0], callback_data=f"period_{key}") for key, p in texts.period_map.items()))

    markup.row(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_callback"))
    return markup


def notification_count_markup() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(text="–î–æ –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notify_once"),
        InlineKeyboardButton(text="–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data="notify_unlimited"),
    )
    markup.row(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_callback"))
    return markup


def go_booking() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            text="üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é",
            url="https://seller.wildberries.ru/supplies-management/all-supplies"
        )
    )


async def requests_keyboard(user_requests, redis_client):
    markup = InlineKeyboardMarkup()
    for i, request in enumerate(user_requests, start=1):
        warehouse_id = request.get('warehouse_ids')
        warehouse_id_list = warehouse_id.split(',') if warehouse_id else []

        warehouse_names = [await redis_client.get_warehouse_name(wh_id) for wh_id in warehouse_id_list]
        warehouse_name = ', '.join(warehouse_names)

        date = request.get('start_date')

        status_symbol = "üü¢" if request.get('status_request', 'False').lower() == 'true' else "üî¥"
        button_text = f"{status_symbol} {i}. {warehouse_name} | {date}"
        markup.add(InlineKeyboardButton(button_text, callback_data=f"request_details_{i}"))

    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_menu"))
    return markup


def back_btn(request_id, status_request) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥."""
    markup = InlineKeyboardMarkup()
    if status_request.lower() == 'true':
        markup.add(InlineKeyboardButton("‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫", callback_data=f"stop_search_{request_id}"))
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_request"))
    return markup


def subscribe_kb() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é", callback_data="go_to_subscribe"))
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_menu"))

    return markup


def subscription_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data="subscribe_30"),
        InlineKeyboardButton(text="2 –º–µ—Å—è—Ü–∞", callback_data="subscribe_60"),
        InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞", callback_data="subscribe_90"),
        InlineKeyboardButton(text="1 –≥–æ–¥", callback_data="subscribe_365"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_callback")
    )
    return keyboard


def payment_btn(pay_link, pay_id, sub_days):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=f"{pay_link}")
    )
    keyboard.add(
        InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"checkpay_{pay_id}_{sub_days}"),
    )
    return keyboard


def close_btn():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_callback"))
    return keyboard


def back():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_menu"))
    return keyboard