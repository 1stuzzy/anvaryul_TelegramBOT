from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import MessageNotModified
from aiogram import types
from loguru import logger


def main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–æ–≤–µ—â–µ–Ω–∏–π."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    main_btn = KeyboardButton("üí† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    support_btn = KeyboardButton("üë®‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    markup.add(main_btn)
    markup.add(support_btn)
    return markup


def menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∏ FAQ."""
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(InlineKeyboardButton("‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data="faq"))
    markup.add(InlineKeyboardButton("üìë –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="my_requests"))
    markup.insert(InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="create_alert"))
    return markup


def support_keyboard(support):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì© –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", url=f"t.me/{support}"))
    return markup


def alerts_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Å –æ–ø—Ü–∏—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏."""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data="faq"))
    markup.add(InlineKeyboardButton("üìë –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="my_requests"))
    markup.insert(InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="create_alert"))
    return markup


def back_to_alerts_kb() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Å –æ–ø—Ü–∏—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏."""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data="faq"))
    markup.add(InlineKeyboardButton("üìë –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="my_requests"))
    markup.insert(InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="create_alert"))
    return markup


def type_alert() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π."""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤", callback_data="default_alert"))
    markup.add(InlineKeyboardButton("‚≠êÔ∏è –ü—Ä–µ–º–∏—É–º –ø–æ–∏—Å–∫", callback_data="premium_alert"))
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_menu"))
    return markup


async def get_warehouses_markup(redis_client):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–∫–ª–∞–¥–æ–≤."""
    markup = InlineKeyboardMarkup()
    try:
        warehouses = await redis_client.get_warehouses()
        for warehouse in warehouses:
            markup.add(InlineKeyboardButton(
                text=warehouse['name'],
                callback_data=f"warehouse_{warehouse['id']}"
            ))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–∫–ª–∞–¥–æ–≤: {e}")
        return None
    return markup


async def warehouse_markup(redis_client, selected_warehouses=None, page=0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    selected_warehouses = [str(id) for id in (selected_warehouses or [])]
    warehouses = await redis_client.get_warehouses()

    max_items_per_page = 16
    total_warehouses = len(warehouses)
    total_pages = (total_warehouses + max_items_per_page - 1) // max_items_per_page

    start_index = page * max_items_per_page
    end_index = min(start_index + max_items_per_page, total_warehouses)

    markup = InlineKeyboardMarkup(row_width=2)

    for warehouse in warehouses[start_index:end_index]:
        is_selected = str(warehouse["id"]) in selected_warehouses
        text = f"‚úÖ {warehouse['name']}" if is_selected else warehouse['name']
        callback_data = f"{'unselect' if is_selected else 'select'}_{warehouse['id']}_page_{page}"

        if len(callback_data) <= 64:
            markup.insert(InlineKeyboardButton(text, callback_data=callback_data))

    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"page_back_{page-1}"))
    if page < total_pages - 1:
        navigation_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"page_forward_{page+1}"))

    if navigation_buttons:
        markup.row(*navigation_buttons)

    if selected_warehouses:
        markup.row(
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è", callback_data="continue"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        )
    else:
        markup.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        )

    return markup


async def update_markup(message: types.Message, markup: InlineKeyboardMarkup):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    try:
        await message.edit_reply_markup(reply_markup=markup)
    except MessageNotModified:
        await message.delete()
        await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ:", reply_markup=markup)
    except Exception:
        return None


def supply_types_markup(selected_supply_types=None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫."""
    selected_supply_types = set(selected_supply_types or [])

    supply_types = [
        ("–ö–æ—Ä–æ–±–∞", "boxes"),
        ("–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã", "mono_pallets"),
        ("–°—É–ø–µ—Ä—Å–µ–π—Ñ", "super_safe"),
        ("QR-–ü–æ—Å—Ç–∞–≤–∫–∞", "qr_supply")
    ]

    markup = InlineKeyboardMarkup(row_width=2)

    for name, value in supply_types:
        if value in selected_supply_types:
            button_text = f"‚úÖ {name}"
            callback_data = f"unselecttype_{value}"
        else:
            button_text = name
            callback_data = f"selecttype_{value}"

        markup.insert(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    if selected_supply_types:
        markup.row(
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ñ∂Ô∏è", callback_data="continue_supply"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
        markup.insert(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    return markup


def acceptance_coefficient_markup():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–∏–µ–º–∫–∏."""
    buttons = [
        InlineKeyboardButton(text="0", callback_data="coefficient_0"),
        InlineKeyboardButton(text="<1", callback_data="coefficient_1"),
        InlineKeyboardButton(text="<2", callback_data="coefficient_2"),
        InlineKeyboardButton(text="<3", callback_data="coefficient_3"),
        InlineKeyboardButton(text="<4", callback_data="coefficient_4"),
        InlineKeyboardButton(text="<5", callback_data="coefficient_5"),
        InlineKeyboardButton(text="<6", callback_data="coefficient_6"),
        InlineKeyboardButton(text="<8", callback_data="coefficient_8"),
    ]

    markup = InlineKeyboardMarkup(row_width=4)
    markup.add(buttons[0], buttons[1], buttons[2], buttons[3])
    markup.add(buttons[4], buttons[5], buttons[6], buttons[7])
    markup.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return markup


def period_selection_markup():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    buttons = [
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
        InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="period_tomorrow"),
        InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="period_3days"),
        InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="period_week"),
        InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="period_month"),
    ]
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(*buttons)
    markup.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return markup


def notification_count_markup() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    markup = InlineKeyboardMarkup(row_width=1)
    buttons = [
        InlineKeyboardButton(text="–î–æ –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notify_once"),
        InlineKeyboardButton(text="–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data="notify_unlimited")
    ]
    markup.add(*buttons)
    markup.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return markup


def go_booking() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    markup = InlineKeyboardMarkup(row_width=1)
    buttons = [
        InlineKeyboardButton(
            text="üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é",
            url="https://seller.wildberries.ru/supplies-management/all-supplies"
        )
    ]
    markup.add(*buttons)
    return markup


def requests_keyboard(user_requests):
    markup = InlineKeyboardMarkup()
    for i, request in enumerate(user_requests, start=1):
        warehouse_name = request.get('warehouse_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥')
        date = request.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
        button_text = f"{i}. {warehouse_name} | {date}"
        callback_data = f"request_details_{i}"
        markup.add(InlineKeyboardButton(button_text, callback_data=callback_data))
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_my_requests"))
    return markup


def back_btn(date) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫", callback_data=f"stop_search_{date}"))
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_requst"))
    return markup


def back_btn2() -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_requst"))
    return markup


def back_btn3() -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_menu"))
    return markup