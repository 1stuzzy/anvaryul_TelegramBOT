import asyncio
from loguru import logger
from data.keyboards.main_kbs import go_booking
from datetime import datetime


class NotificationService:
    def __init__(self, api_client, redis_client, bot, tokens, max_concurrent_requests=10, min_delay_between_requests=1.1):
        self.api_client = api_client
        self.redis_client = redis_client
        self.bot = bot
        self.tokens = tokens  # –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        self.current_token_index = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
        self.semaphore = asyncio.Semaphore(max_concurrent_requests)
        self.min_delay_between_requests = min_delay_between_requests

    def get_current_token(self):
        return self.tokens[self.current_token_index]

    def switch_token(self):
        self.current_token_index = (self.current_token_index + 1) % len(self.tokens)

    async def check_and_notify_users(self):
        await self.redis_client.init()
        delay = 5
        while True:
            try:
                user_requests = await self.redis_client.get_user_requests()

                tasks = [self.process_user_request(request) for request in user_requests]
                await asyncio.gather(*tasks)
                logger.debug("–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

                await asyncio.sleep(delay)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {e}")
                await asyncio.sleep(delay)

    async def notify_user(self, user_id: int, message: str, delay: float = 5.0):
        try:
            await asyncio.sleep(delay)
            markup = go_booking()
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(user_id, message, reply_markup=markup, parse_mode='HTML')
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Ç–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if "Message is not modified" in str(e):
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                else:
                    raise e
            await asyncio.sleep(delay)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            pass


    async def process_user_request(self, request):
        try:
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –ø–æ–ª—É—á–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            notify = request.get('notify', '0')  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '0', –µ—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
            status_request = request.get('status_request', 'false').lower() == 'true'
            if not status_request:
                logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.get('user_id')} —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π {request.get('date')} –æ—Ç–∫–ª—é—á–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                return

            required_keys = ['user_id', 'warehouse_ids', 'coefficient', 'supply_types']
            missing_keys = [key for key in required_keys if key not in request]
            if missing_keys:
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω—ã –∫–ª—é—á–∏ {missing_keys} –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.get('user_id')}")
                return

            try:
                user_id = int(request['user_id']) if request.get('user_id') is not None else 0
                coefficient = float(request['coefficient']) if request.get('coefficient') is not None else 0.0
                notify = int(notify) if notify is not None else 0
                warehouse_ids = request['warehouse_ids'].split(',')
                supply_types = request['supply_types'].split(',')
                status_request = status_request == 'true'
                logger.debug(f"Processing request for user_id: {request.get('user_id')}, coefficient: {request.get('coefficient')}, notify: {notify}")
            except (ValueError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.get('user_id')}: {e}")
                return


            if not status_request:
                logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.get('user_id')} —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π {request.get('date')} –æ—Ç–∫–ª—é—á–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                return

            async with self.semaphore:
                await asyncio.sleep(self.min_delay_between_requests)

                max_attempts = len(self.tokens) * 3
                attempt = 0
                delay = 10
                unauthorized_attempts = 0

                while attempt < max_attempts:
                    try:
                        coefficients = await self.api_client.get_coefficients(warehouse_ids=warehouse_ids)
                        if not coefficients:
                            logger.info(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            return
                        break
                    except Exception as e:
                        error_message = str(e)
                        if "429" in error_message:
                            attempt += 1
                            if attempt < max_attempts:
                                await asyncio.sleep(delay)
                                self.switch_token()
                                delay *= 2
                            else:
                                logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                                return
                        elif "401 Unauthorized" in error_message:
                            logger.warning("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞.")
                            self.api_client.switch_token()
                            unauthorized_attempts += 1
                            if unauthorized_attempts >= len(self.api_client.tokens):
                                logger.error("–í—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ø—ã—Ç–æ–∫.")
                                return
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
                            return

                filtered_coefficients = [
                    coef for coef in coefficients
                    if coef.get('warehouseID') is not None and int(coef.get('warehouseID')) in map(int, warehouse_ids)
                    and coef.get('boxTypeID') is not None and int(coef.get('boxTypeID')) in map(int, request['boxTypeID'].split(','))
                ]


                if not filtered_coefficients:
                    logger.info(f"–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return

                for coef in filtered_coefficients:
                    coef_value = coef.get('coefficient')
                    box_type_id = coef.get('boxTypeID')
                    date = datetime.strptime(coef.get('date'), '%Y-%m-%dT%H:%M:%SZ').strftime('%d.%m.%Y')

                    relevant_change = False

                    if request['coefficient'].startswith("<"):
                        threshold = float(request['coefficient'][1:])
                        if coef_value >= 0 and coef_value < threshold:
                            relevant_change = True
                            coefficient_display = f"<{coef_value}"
                    else:
                        threshold = float(request['coefficient'])
                        if coef_value >= 0 and coef_value <= threshold:
                            relevant_change = True
                            coefficient_display = str(coef_value)

                    if relevant_change:
                        message_key = f"sent:{user_id}:{coef['warehouseID']}:{box_type_id}:{coef['date']}:{coef_value}"
                        already_sent = await self.redis_client.redis.exists(message_key)

                        if not already_sent:
                            message = (
                                f"<b>üéâ –°–ª–æ—Ç –Ω–∞–π–¥–µ–Ω:</b>\n\n"
                                f"<i><b>–î–∞—Ç–∞:</b> {date}</i>\n"
                                f"<i><b>–°–∫–ª–∞–¥:</b> {coef['warehouseName']}</i>\n"
                                f"<i><b>–¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {coef['boxTypeName']}</i>\n"
                                f"<i><b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {coefficient_display}</i>\n"
                            )

                            await self.notify_user(user_id, message)
                            await self.redis_client.redis.set(message_key, "sent", ex=24 * 60 * 60)

                            if notify == 0:
                                logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                                return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


    async def stop_user_task(user_id: int, task_id: str):
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
            result = current_app.control.revoke(task_id, terminate=True)
            
            if result:
                logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ Redis –∏–ª–∏ –¥—Ä—É–≥–æ–π –ë–î
                await self.redis.hset(f"user_task:{user_id}:{task_id}", 'status', 'stopped')
                return True
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

