import asyncio
import html
from loguru import logger


class NotificationService:
    def __init__(self, api_client, redis_client, bot, max_concurrent_requests=5, min_delay_between_requests=2.1):
        self.api_client = api_client
        self.redis_client = redis_client
        self.bot = bot
        self.semaphore = asyncio.Semaphore(max_concurrent_requests)
        self.min_delay_between_requests = min_delay_between_requests
        logger.debug("NotificationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def check_and_notify_users(self):
        await self.redis_client.init()
        logger.debug("Redis –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        while True:
            try:
                logger.debug("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                user_requests = await self.redis_client.get_user_requests()
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(user_requests)} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Redis")

                tasks = [self.process_user_request(request) for request in user_requests]
                await asyncio.gather(*tasks)
                logger.debug("–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

                await asyncio.sleep(60)
                logger.debug("–¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {e}")
                await asyncio.sleep(60)
                logger.debug("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")

    async def process_user_request(self, request):
        try:
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {request}")

            required_keys = ['user_id', 'warehouse_ids', 'coefficient', 'supply_types', 'status']
            for key in required_keys:
                if key not in request:
                    logger.error(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á '{key}': {request}")
                    return

            async with self.semaphore:
                await asyncio.sleep(self.min_delay_between_requests)
                logger.debug(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {self.min_delay_between_requests} —Å–µ–∫—É–Ω–¥")

                coefficients = await self.api_client.get_coefficients(
                    warehouse_ids=request['warehouse_ids'].split(',')
                )
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {coefficients}")

                relevant_changes = []
                for coef in coefficients:
                    coef_value = coef['coefficient']
                    user_coef = request['coefficient']

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    if isinstance(user_coef, str) and user_coef.startswith("<"):
                        threshold = float(user_coef[1:])
                        if coef_value < threshold:
                            relevant_changes.append(coef)
                    else:
                        if coef_value == float(user_coef):
                            relevant_changes.append(coef)

                logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(relevant_changes)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request['user_id']}")

                if relevant_changes:
                    messages = [
                        f"üì¶ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Å–∫–ª–∞–¥—É {html.escape(str(change['warehouseName']))}</b>\n"
                        f"–¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏: {html.escape(str(change['boxTypeName']))}\n"
                        f"–î–∞—Ç–∞: {html.escape(str(change['date']))}\n"
                        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏—ë–º–∫–∏: {html.escape(str(change['coefficient']))}\n"
                        for change in relevant_changes
                    ]

                    final_message = "\n".join(messages)
                    logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request['user_id']}: {final_message}")

                    last_message_key = f"last_message:{request['user_id']}"
                    last_message = await self.redis_client.redis.get(last_message_key)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if last_message != final_message:
                        await self.notify_user(request['user_id'], final_message)
                        await self.redis_client.redis.set(last_message_key, final_message)
                        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request['user_id']}")

                        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 0 (–¥–æ –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è), –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        if request['status'] == 0:
                            logger.debug(f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request['user_id']} –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                            return

                    else:
                        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request['user_id']}")
                else:
                    logger.debug(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request['user_id']} –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    async def notify_user(self, user_id: int, message: str):
        try:
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            message = html.escape(message)

            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ –¥–ª–∏–Ω–Ω–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤
            max_length = 4096
            messages = [message[i:i + max_length] for i in range(0, len(message), max_length)]

            for msg in messages:
                await self.bot.send_message(user_id, msg)

            logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")