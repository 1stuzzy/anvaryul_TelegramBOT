from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.utils.markdown import text as md_text
from aiogram.types import ParseMode

import json
from loguru import logger
from utils.config import save_config
from loader import config
from functions.executional import is_admin


async def set_requisites_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    new_requisites = message.get_args().strip()

    if not new_requisites:
        await message.reply("<i>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n\n"
                            "–ü—Ä–∏–º–µ—Ä: /set_requisites 00000</i>", parse_mode=ParseMode.HTML)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ config
    config.requisites = new_requisites

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª
    save_config(config)

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞: {new_requisites}")

    await message.reply(f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ</b>\n\n"
                        f"<b>üí≥ –ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n"
                        f"{new_requisites}")


def register_admin_handlers(dp):
    dp.message_handler(Command("set_requisites"))(set_requisites_handler)