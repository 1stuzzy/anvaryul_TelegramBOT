from aiogram import types
import aioredis
import asyncio
from loader import dp, bot
from keyboards.main_kbs import (main_keyboard, menu_keyboard, alerts_keyboard,
                                type_alert, warehouse_markup, period_selection_markup,
                                supply_types_markup, acceptance_coefficient_markup, notification_count_markup,
                                start_bot_markup)
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import MessageNotModified, Throttled
from aiogram.dispatcher import FSMContext
from loguru import logger
from db.models import UserRequest
from db.basefunctional import get_warehouses, get_warehouse_name
from wb_api import add_notification_to_queue, init_redis


@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ü—Ä–∏–≤–µ—Ç", reply_markup=main_keyboard())
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:", reply_markup=menu_keyboard())


@dp.message_handler(Text(equals="üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è"), state='*')
@dp.callback_query_handler(lambda c: c.data == 'alerts')
async def process_alerts(q):
    chat_id, message_id = (q.chat.id, q.message_id) if isinstance(q, types.Message) else (q.message.chat.id, q.message.message_id)
    await bot.send_message(
        chat_id,
        "<b>üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n\n<i>–ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö Wildberries</i>\n",
        reply_markup=alerts_keyboard()
    )


@dp.callback_query_handler(lambda c: c.data == 'create_alert')
async def process_create_alert(query: types.CallbackQuery):
    await bot.answer_callback_query(query.id)
    try:
        await query.message.edit_text("<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–æ–≤–æ—â–µ–Ω–∏—è:</i>", reply_markup=type_alert())
    except MessageNotModified:
        pass


@dp.callback_query_handler(lambda c: c.data == 'default_alert', state='*')
async def process_default_alert(query: types.CallbackQuery, state: FSMContext):
    await state.reset_state(with_data=True)
    await bot.answer_callback_query(query.id)
    await state.update_data(selected_warehouses=[])

    try:
        await query.message.edit_text("<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</i>",
                                      reply_markup=warehouse_markup([]))
    except MessageNotModified:
        pass


@dp.callback_query_handler(lambda call: call.data.startswith("page_"))
async def handle_page_callback(call: types.CallbackQuery, state: FSMContext):
    direction, page = call.data.split("_")[1], int(call.data.split("_")[2])
    user_data = await state.get_data()
    selected_warehouses = user_data.get("selected_warehouses", [])
    total_pages = (len(get_warehouses()) + 15) // 16
    if direction == "back" and page > 0:
        page -= 1
    elif direction == "forward" and page < total_pages - 1:
        page += 1
    else:
        await call.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π/–ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", show_alert=True)
        return

    await update_markup(call.message, warehouse_markup(selected_warehouses, page))


@dp.callback_query_handler(lambda call: call.data.startswith(("select_", "unselect_")))
async def handle_select_callback(call: types.CallbackQuery, state: FSMContext):
    try:
        data_parts = call.data.split("_")
        action = data_parts[0]
        warehouse_id_str = data_parts[1]  # –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å warehouse_id
        page_str = data_parts[3]

        if warehouse_id_str.isdigit() and page_str.isdigit():
            warehouse_id = int(warehouse_id_str)
            page = int(page_str)

            user_data = await state.get_data()
            selected_warehouses = user_data.get("selected_warehouses", [])

            if action == "select" and warehouse_id not in selected_warehouses:
                selected_warehouses.append(warehouse_id)
            elif action == "unselect" and warehouse_id in selected_warehouses:
                selected_warehouses.remove(warehouse_id)

            await state.update_data(selected_warehouses=selected_warehouses)
            await update_markup(call.message, warehouse_markup(selected_warehouses=selected_warehouses, page=page))
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–¥–∞–Ω–Ω—ã—Ö: {e}")



async def update_markup(message, markup):
    try:
        await message.edit_reply_markup(reply_markup=markup)
    except MessageNotModified:
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")


@dp.callback_query_handler(lambda call: call.data == "continue")
async def handle_continue_callback(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –ø–æ—Å—Ç–∞–≤–æ–∫ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</i>",
        reply_markup=supply_types_markup()
    )


@dp.callback_query_handler(lambda c: c.data and (c.data.startswith('selecttype_') or c.data.startswith('unselecttype_')))
async def process_supply_type_selection(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    action, supply_type = callback_query.data.split('_', 1)

    user_data = await state.get_data()
    selected_supply_types = user_data.get("selected_supply_types", set())

    if action == "selecttype":
        selected_supply_types.add(supply_type)
    elif action == "unselecttype":
        selected_supply_types.discard(supply_type)

    await state.update_data(selected_supply_types=selected_supply_types)
    markup = supply_types_markup(selected_supply_types)

    await callback_query.message.edit_reply_markup(reply_markup=markup)


@dp.callback_query_handler(lambda call: call.data == "continue_supply")
async def handle_continue_callback(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(f"<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
                                 f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–µ–º–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å 1, —Ç–æ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã 1 –∏ –º–µ–Ω—å—à–µ):</i>",
                                 reply_markup=acceptance_coefficient_markup())


@dp.callback_query_handler(lambda c: c.data.startswith('coefficient_'))
async def process_coefficient_selection(callback_query: types.CallbackQuery, state: FSMContext):
    coefficient = callback_query.data.split('_')[1]
    await state.update_data(coefficient=coefficient)

    await callback_query.message.edit_reply_markup(reply_markup=period_selection_markup())


@dp.callback_query_handler(Text(startswith="period_"))
async def process_period_selection(query: types.CallbackQuery, state: FSMContext):
    period = query.data.split('_')[-1]

    period_map = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "tomorrow": "–ó–∞–≤—Ç—Ä–∞",
        "3days": "3 –¥–Ω—è",
        "week": "–ù–µ–¥–µ–ª—è",
        "month": "–ú–µ—Å—è—Ü"
    }

    selected_period = period_map.get(period, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    await state.update_data(period=selected_period)

    await query.message.edit_text(f"<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
                                  f"<i>–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤–∞—Å —É–≤–µ–¥–æ–º–∏—Ç—å? (–ù–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—à–ª—ë—Ç –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–æ—Ç –∏ –≤—Å—ë)</i>",
                                  reply_markup=notification_count_markup())


@dp.callback_query_handler(lambda c: c.data in ['notify_once', 'notify_unlimited'])
async def process_notification_count_selection(query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    warehouse_names = ', '.join(
        get_warehouse_name(int(warehouse_id)) for warehouse_id in user_data.get("selected_warehouses", [])
    )

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –ø–æ—Å—Ç–∞–≤–æ–∫
    supply_type_map = {
        "qr_supply": "QR-–ü–æ—Å—Ç–∞–≤–∫–∞",
        "boxes": "–ö–æ—Ä–æ–±–∞",
        "mono_pallets": "–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã",
        "super_safe": "–°—É–ø–µ—Ä—Å–µ–π—Ñ"
    }
    selected_supply_types = ', '.join(
        supply_type_map.get(supply_type, supply_type) for supply_type in user_data.get("selected_supply_types", [])
    )

    coefficient = user_data.get("coefficient", "")

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≤ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    period_map = {
        "–°–µ–≥–æ–¥–Ω—è": 1,
        "–ó–∞–≤—Ç—Ä–∞": 2,
        "3 –¥–Ω—è": 3,
        "–ù–µ–¥–µ–ª—è": 7,
        "–ú–µ—Å—è—Ü": 30
    }
    period = period_map.get(user_data.get("period", ""), 0)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: 0 - –î–æ –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, 1 - –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    notification_type = 0 if query.data == "notify_once" else 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    UserRequest.create(
        user_id=query.from_user.id,
        warehouse_ids=','.join(map(str, user_data.get("selected_warehouses", []))),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º warehouse_id
        supply_types=','.join(user_data.get("selected_supply_types", [])),
        coefficient=coefficient,
        period=period,
        notification_type=notification_type
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    final_text = (
        "üö® <b>–í–ù–ò–ú–ê–ù–ò–ï –í–ê–ñ–ù–û!</b>\n\n"
        "<b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
        f"–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω. –ù–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        f"–í–∞—à –∑–∞–ø—Ä–æ—Å: {warehouse_names} / {user_data.get('period', '')} / {selected_supply_types} / –º–µ–Ω—å—à–µ {coefficient}\n\n"
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç‚òùÔ∏è)\n"
        "–ù–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –æ –ø–æ–∏—Å–∫–µ, —Å–∏—Å—Ç–µ–º–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–∞–∑–Ω—ã–π –±–æ—Ç‚òùÔ∏è!  –ü—Ä–∏ —ç—Ç–æ–º –±–æ—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å!\n\n"
        "‚òùÔ∏è‚òùÔ∏è‚òùÔ∏è <b>–î–õ–Ø –ó–ê–ü–£–°–ö–ê –ü–û–ò–°–ö–ê, –ù–£–ñ–ù–û –ù–ê–ñ–ê–¢–¨ –ö–ù–û–ü–ö–£ –ù–ò–ñ–ï –ò –í –û–¢–ö–†–´–í–®–ï–ú–°–Ø –ë–û–¢–ï –ù–ê–ñ–ê–¢–¨ –ö–ù–û–ü–ö–£ –°–¢–ê–†–¢!</b>\n\n"
        "–¢–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–Ω—ë—Ç –∏—Å–∫–∞—Ç—å –í–∞–º —Å–ª–æ—Ç—ã‚òùÔ∏è\n\n"
        "–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ë–£–î–£–¢ –ü–†–ò–•–û–î–ò–¢–¨ –ò–ú–ï–ù–ù–û –û–¢–¢–£–î–ê! –ò–ó –¢–û–ì–û –ë–û–¢–ê!\n\n"
        "–ù–ê–ñ–ê–¢–¨ –ö–ù–û–ü–ö–£ –ü–ï–†–ï–ô–¢–ò –ò –ó–ê–ü–£–°–¢–ò–¢–¨ –∏ –¥–∞–ª–µ–µ –≤ –±–æ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!\n"
        "‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"
    )

    redis = await init_redis()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis, –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ
    await add_notification_to_queue(redis, query.from_user.id, final_text)

    bot_me = await dp.bot.get_me()
    await query.message.edit_text(final_text, reply_markup=start_bot_markup(bot_me.username))
