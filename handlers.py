from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loader import dp, bot
from wb_api import get_warehouses, get_coefficients
from keyboards.pagination import create_pagination_keyboard
from keyboards.main_kbs import main_keyboard, menu_keyboard, alerts_keyboard, type_alert, warehouse_markup
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import MessageNotModified
from aiogram.dispatcher import FSMContext
from loguru import logger
from states import Form
from db.models import Warehouse


@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message, state=FSMContext):
    await state.finish()
    await message.answer("–ü—Ä–∏–≤–µ—Ç", reply_markup=main_keyboard())
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:", reply_markup=menu_keyboard())


@dp.message_handler(Text(equals="üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è"), state='*')
@dp.callback_query_handler(lambda c: c.data == 'alerts')
async def process_alerts(q):
    if isinstance(q, types.Message):
        chat_id = q.chat.id
        message_id = q.message_id
        await bot.send_message(chat_id,
                               "<b>üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n\n"
                               "<i>–ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö Wildberries</i>\n",
                               reply_markup=alerts_keyboard())

    elif isinstance(q, types.CallbackQuery):
        chat_id = q.message.chat.id
        message_id = q.message.message_id
        await bot.answer_callback_query(q.id)

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="<b>üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n\n"
                 "<i>–ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö Wildberries</i>\n",
            reply_markup=alerts_keyboard()
        )


@dp.callback_query_handler(lambda c: c.data == 'create_alert')
async def process_alerts(query: types.CallbackQuery):
    await bot.answer_callback_query(query.id)
    try:
        await query.message.edit_text(
            text="<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
                 "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–æ–≤–æ—â–µ–Ω–∏—è:</i>",
            reply_markup=type_alert()
        )
    except MessageNotModified:
        pass


@dp.callback_query_handler(lambda c: c.data == 'default_alert')
async def process_alerts(query: types.CallbackQuery):
    await bot.answer_callback_query(query.id)
    print(f"Callback data received: {query.data}")

    user_id = query.from_user.id
    selected_warehouses = get_selected_warehouses(user_id)
    print(f"User {user_id} selected warehouses: {selected_warehouses}")

    try:
        await query.message.edit_text(
            text="<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
                 "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</i>",
            reply_markup=warehouse_markup(selected_warehouses)
        )
        print("Message edited successfully.")
    except MessageNotModified:
        print("Message was not modified.")
    except Exception as e:
        print(f"Error occurred: {e}")




user_selected_warehouses = {}


def get_selected_warehouses(user_id):
    return user_selected_warehouses.get(user_id, [])


def save_selected_warehouses(user_id, selected_warehouses):
    user_selected_warehouses[user_id] = selected_warehouses


@dp.callback_query_handler(lambda c: c.data.startswith('select_') or c.data.startswith('unselect_'))
async def process_warehouse_selection(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    selected_warehouses = get_selected_warehouses(user_id)

    warehouse_id = int(callback_query.data.split('_')[1])

    if callback_query.data.startswith('select_'):
        if warehouse_id not in selected_warehouses:
            selected_warehouses.append(warehouse_id)
    elif callback_query.data.startswith('unselect_'):
        if warehouse_id in selected_warehouses:
            selected_warehouses.remove(warehouse_id)

    save_selected_warehouses(user_id, selected_warehouses)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = warehouse_markup(selected_warehouses)
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=markup)
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == 'premium_alert')
async def process_alerts(query: types.CallbackQuery):
    await bot.answer_callback_query(query.id)
    try:
        await query.message.edit_text(
            text="<b>üíé –û–ø—Ü–∏—è '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤':</b>",
            reply_markup=None
        )
    except MessageNotModified:
        pass


@dp.callback_query_handler(lambda c: c.data == 'my_alerts')
async def process_alerts(query: types.CallbackQuery):
    await bot.answer_callback_query(query.id)
    try:
        await query.message.edit_text(
            text="<b>üîç –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã:</b>",
            reply_markup=None
        )
    except MessageNotModified:
        pass






















@dp.message_handler(Text(equals="–û–ø–æ–≤–µ—â–µ–Ω–∏—è"), state='*')
async def send_warehouses(message: types.Message, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    warehouses = await get_warehouses()
    if warehouses:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=create_pagination_keyboard(warehouses, page=0))
        await Form.selecting_warehouses.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('page_'), state=Form.selecting_warehouses)
async def process_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_query.data}")
    page = int(callback_query.data.split('_')[1])
    warehouses = await get_warehouses()

    if warehouses:
        await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id,
                                            reply_markup=create_pagination_keyboard(warehouses, page))


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('select_'), state=Form.selecting_warehouses)
async def process_warehouse_selection(callback_query: types.CallbackQuery, state: FSMContext):
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_query.data}")
    warehouse_id, page = callback_query.data.split('_')[1], int(callback_query.data.split('_')[2])

    async with state.proxy() as data:
        if 'selected_warehouses' not in data:
            data['selected_warehouses'] = []
        if warehouse_id in data['selected_warehouses']:
            data['selected_warehouses'].remove(warehouse_id)
        else:
            data['selected_warehouses'].append(warehouse_id)

    warehouses = await get_warehouses()
    await bot.edit_message_reply_markup(
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=create_pagination_keyboard(warehouses, page, data['selected_warehouses'])
    )


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('continue_'), state=Form.selecting_warehouses)
async def process_continue(callback_query: types.CallbackQuery, state: FSMContext):
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_query.data}")
    async with state.proxy() as data:
        selected_warehouses = data.get('selected_warehouses', [])

    if selected_warehouses:
        await bot.send_message(
            callback_query.from_user.id,
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å–∫–ª–∞–¥—ã: {', '.join(selected_warehouses)}.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:",
        )
        await Form.confirming_selection.set()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('tariff_'), state=Form.confirming_selection)
async def process_tariff_selection(callback_query: types.CallbackQuery, state: FSMContext):
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_query.data}")
    tariff_data = callback_query.data.split('_')
    warehouse_id = int(tariff_data[1])
    supply_type = tariff_data[2]
    tariff = tariff_data[3]

    coefficients = await get_coefficients(warehouse_id)
    coef_str = ", ".join([f"{coef['date']}: {coef['coefficient']}" for coef in coefficients]) if coefficients else "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ—Å—Ç–∞–≤–∫—É {supply_type} –Ω–∞ —Å–∫–ª–∞–¥ {warehouse_id}.\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ø—Ä–∏–µ–º–∫–∏: {tariff}.\n"
        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {coef_str}"
    )
    await state.finish()