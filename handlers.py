import aioredis
import asyncio
from aiogram import types
from loader import dp, bot
from loguru import logger
from wb_api import add_notification_to_queue, init_redis
from db.basefunctional import get_warehouses, save_user_request_to_redis, get_warehouse_by_id
from keyboards.main_kbs import (
    main_keyboard, menu_keyboard, alerts_keyboard,
    type_alert, warehouse_markup, period_selection_markup,
    supply_types_markup, acceptance_coefficient_markup, notification_count_markup,
    start_bot_markup, update_markup
)
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import MessageNotModified, Throttled
from aiogram.dispatcher import FSMContext



@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ü—Ä–∏–≤–µ—Ç", reply_markup=main_keyboard())
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:", reply_markup=menu_keyboard())


@dp.message_handler(Text(equals="üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è"), state='*')
@dp.callback_query_handler(lambda c: c.data == 'alerts')
async def process_alerts(q):
    chat_id, message_id = (q.chat.id, q.message_id) if isinstance(q, types.Message) else (q.message.chat.id, q.message.message_id)
    await bot.send_message(
        chat_id,
        "<b>üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n\n<i>–ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö Wildberries</i>\n",
        reply_markup=alerts_keyboard()
    )


@dp.callback_query_handler(lambda c: c.data == 'create_alert')
async def process_create_alert(query: types.CallbackQuery):
    await bot.answer_callback_query(query.id)
    try:
        await query.message.edit_text("<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–æ–≤–æ—â–µ–Ω–∏—è:</i>", reply_markup=type_alert())
    except MessageNotModified:
        pass


@dp.callback_query_handler(lambda c: c.data == 'default_alert', state='*')
async def process_default_alert(query: types.CallbackQuery, state: FSMContext):
    await state.reset_state(with_data=True)
    await bot.answer_callback_query(query.id)
    await state.update_data(selected_warehouses=[])

    try:
        await query.message.edit_text("<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</i>",
                                      reply_markup=await warehouse_markup([]))
    except MessageNotModified:
        pass


@dp.callback_query_handler(lambda call: call.data.startswith("page_"))
async def handle_page_callback(call: types.CallbackQuery, state: FSMContext):
    redis = await init_redis()
    direction, page = call.data.split("_")[1], int(call.data.split("_")[2])
    user_data = await state.get_data()
    selected_warehouses = user_data.get("selected_warehouses", [])

    all_warehouses = await get_warehouses(redis)
    total_pages = (len(all_warehouses) + 15) // 16
    
    if direction == "back" and page > 0:
        page -= 1
    elif direction == "forward" and page < total_pages - 1:
        page += 1
    else:
        await call.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π/–ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", show_alert=True)
        return

    # –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    await update_markup(call.message, await warehouse_markup(selected_warehouses, page))



@dp.callback_query_handler(lambda call: call.data.startswith(("select_", "unselect_")))
async def handle_select_callback(call: types.CallbackQuery, state: FSMContext):
    try:
        data_parts = call.data.split("_")
        action = data_parts[0]
        warehouse_id_str = data_parts[1]
        page_str = data_parts[3]

        if warehouse_id_str.isdigit() and page_str.isdigit():
            warehouse_id = int(warehouse_id_str)
            page = int(page_str)

            user_data = await state.get_data()
            selected_warehouses = user_data.get("selected_warehouses", [])

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
            if action == "select" and warehouse_id not in selected_warehouses:
                selected_warehouses.append(warehouse_id)
            elif action == "unselect" and warehouse_id in selected_warehouses:
                selected_warehouses.remove(warehouse_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.update_data(selected_warehouses=selected_warehouses)

            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
            logger.debug(f"Selected warehouses: {selected_warehouses}")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            updated_markup = await warehouse_markup(selected_warehouses=selected_warehouses, page=page)
            await update_markup(call.message, updated_markup)
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–¥–∞–Ω–Ω—ã—Ö: {e}")




@dp.callback_query_handler(lambda call: call.data == "continue")
async def handle_continue_callback(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –ø–æ—Å—Ç–∞–≤–æ–∫ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</i>",
        reply_markup=supply_types_markup()
    )


@dp.callback_query_handler(lambda c: c.data and (c.data.startswith('selecttype_') or c.data.startswith('unselecttype_')))
async def process_supply_type_selection(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    action, supply_type = callback_query.data.split('_', 1)

    user_data = await state.get_data()
    selected_supply_types = user_data.get("selected_supply_types", set())

    if action == "selecttype":
        selected_supply_types.add(supply_type)
    elif action == "unselecttype":
        selected_supply_types.discard(supply_type)

    await state.update_data(selected_supply_types=selected_supply_types)
    markup = supply_types_markup(selected_supply_types)

    await callback_query.message.edit_reply_markup(reply_markup=markup)


@dp.callback_query_handler(lambda call: call.data == "continue_supply")
async def handle_continue_callback(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(f"<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
                                 f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–µ–º–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å 1, —Ç–æ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã 1 –∏ –º–µ–Ω—å—à–µ):</i>",
                                 reply_markup=acceptance_coefficient_markup())


@dp.callback_query_handler(lambda c: c.data.startswith('coefficient_'))
async def process_coefficient_selection(callback_query: types.CallbackQuery, state: FSMContext):
    coefficient = callback_query.data.split('_')[1]
    await state.update_data(coefficient=coefficient)

    await callback_query.message.edit_reply_markup(reply_markup=period_selection_markup())


@dp.callback_query_handler(Text(startswith="period_"))
async def process_period_selection(query: types.CallbackQuery, state: FSMContext):
    period = query.data.split('_')[-1]

    period_map = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "tomorrow": "–ó–∞–≤—Ç—Ä–∞",
        "3days": "3 –¥–Ω—è",
        "week": "–ù–µ–¥–µ–ª—è",
        "month": "–ú–µ—Å—è—Ü"
    }

    selected_period = period_map.get(period, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    await state.update_data(period=selected_period)

    await query.message.edit_text(f"<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
                                  f"<i>–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤–∞—Å —É–≤–µ–¥–æ–º–∏—Ç—å? (–ù–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—à–ª—ë—Ç –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–æ—Ç –∏ –≤—Å—ë)</i>",
                                  reply_markup=notification_count_markup())


@dp.callback_query_handler(lambda c: c.data in ['notify_once', 'notify_unlimited'])
async def process_notification_count_selection(query: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis
        redis = await init_redis()

        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–∫–ª–∞–¥–æ–≤ –∏ —Ç–∏–ø—ã –ø–æ—Å—Ç–∞–≤–æ–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        warehouse_ids = user_data.get("selected_warehouses", [])
        supply_types = user_data.get("selected_supply_types", [])
        coefficient = user_data.get("coefficient", "")

        # –ö–∞—Ä—Ç–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        supply_name_map = {
            "mono_pallets": "–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã",
            "boxes": "–ö–æ—Ä–æ–±–∞",
            "super_safe": "–°—É–ø–µ—Ä—Å–µ–π—Ñ",
            "qr_supply": "QR-–ü–æ—Å—Ç–∞–≤–∫–∞"
        }

        # –ö–∞—Ä—Ç–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ –¥–Ω–∏
        period_map = {
            "–°–µ–≥–æ–¥–Ω—è": 1,
            "–ó–∞–≤—Ç—Ä–∞": 2,
            "3 –¥–Ω—è": 3,
            "–ù–µ–¥–µ–ª—è": 7,
            "–ú–µ—Å—è—Ü": 30
        }

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤ –≤ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
        warehouse_names = []
        for warehouse_id in warehouse_ids:
            warehouse = await get_warehouse_by_id(redis, warehouse_id)
            warehouse_names.append(warehouse['name'])

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        supply_types_names = ', '.join(supply_name_map.get(supply_type, supply_type) for supply_type in supply_types)

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
        period = period_map.get(user_data.get("period", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥"))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_type = 0 if query.data == "notify_once" else 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis
        await save_user_request_to_redis(
            redis,
            user_id=query.from_user.id,
            warehouse_ids=','.join(map(str, warehouse_ids)),
            supply_types=','.join(supply_types),
            coefficient=coefficient,
            period=period,
            notification_type=notification_type
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        final_text = (
            "üö® <b>–í–ù–ò–ú–ê–ù–ò–ï –í–ê–ñ–ù–û!</b>\n\n"
            "<b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
            f"–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω. –ù–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            f"–í–∞—à –∑–∞–ø—Ä–æ—Å: {', '.join(warehouse_names)} / {user_data.get('period', '')} / {supply_types_names} / –º–µ–Ω—å—à–µ {coefficient}\n\n"
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç‚òùÔ∏è)\n"
            "–ù–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –æ –ø–æ–∏—Å–∫–µ, —Å–∏—Å—Ç–µ–º–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–∞–∑–Ω—ã–π –±–æ—Ç‚òùÔ∏è!  –ü—Ä–∏ —ç—Ç–æ–º –±–æ—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å!\n\n"
            "‚òùÔ∏è‚òùÔ∏è‚òùÔ∏è <b>–î–õ–Ø –ó–ê–ü–£–°–ö–ê –ü–û–ò–°–ö–ê, –ù–£–ñ–ù–û –ù–ê–ñ–ê–¢–¨ –ö–ù–û–ü–ö–£ –ù–ò–ñ–ï –ò –í –û–¢–ö–†–´–í–®–ï–ú–°–Ø –ë–û–¢–ï –ù–ê–ñ–ê–¢–¨ –ö–ù–û–ü–ö–£ –°–¢–ê–†–¢!</b>\n\n"
            "–¢–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–Ω—ë—Ç –∏—Å–∫–∞—Ç—å –í–∞–º —Å–ª–æ—Ç—ã‚òùÔ∏è\n\n"
            "–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ë–£–î–£–¢ –ü–†–ò–•–û–î–ò–¢–¨ –ò–ú–ï–ù–ù–û –û–¢–¢–£–î–ê! –ò–ó –¢–û–ì–û –ë–û–¢–ê!\n\n"
            "–ù–ê–ñ–ê–¢–¨ –ö–ù–û–ü–ö–£ –ü–ï–†–ï–ô–¢–ò –ò –ó–ê–ü–£–°–¢–ò–¢–¨ –∏ –¥–∞–ª–µ–µ –≤ –±–æ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!\n"
            "‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        bot_me = await dp.bot.get_me()
        await query.message.edit_text(final_text, reply_markup=start_bot_markup(bot_me.username))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis: {e}")
        await query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

